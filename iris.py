# -*- coding: utf-8 -*-
"""iris.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d36ZsWTm_ZAABml5a-n2TWQnaJqHBupf

**Import Dataset**
"""

from google.colab import drive
drive.mount('/content/drive/')

"""**Import Librabies**"""

import pandas as pd
import numpy as np

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

df=pd.read_csv('/content/drive/MyDrive/Data set/iris.csv')

df

"""**Loading dataset**"""

df.head()

"""**Visualization**"""

df.describe()

#sns.pairplot(df, hue='Class_labels')

"""**Separate features and target**"""

data = df.values

X = data[:,0:4]
Y = data[:,4]
print(X)

data = df.values

X = data[:,0:4]
Y = data[:,4]
print(Y)

"""**Splitting the data training and testiin**"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2)
print(X_train)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2)
print(y_train)

"""**Support vector machine algorithm**"""

from sklearn.svm import SVC

model_svc = SVC()
model_svc.fit(X_train, y_train)

prediction1 = model_svc.predict(X_test)
from sklearn.metrics import accuracy_score
print(accuracy_score(y_test, prediction1)*100)
for i in range(len(prediction1)):
  print(y_test[i], prediction1[i])

"""**Logistic regression**"""

from sklearn.linear_model import LogisticRegression
model_LR=LogisticRegression()
model_LR.fit(X_train,y_train)

prediction2 = model_LR.predict(X_test)
from sklearn.metrics import accuracy_score
print(accuracy_score(y_test, prediction2)*100)
for i in range(len(prediction1)):
  print(y_test[i],prediction1[i])

"""**Dicision tree classifier**"""

from sklearn.tree import DecisionTreeClassifier
model_DTC=DecisionTreeClassifier()
model_DTC.fit(X_train,y_train)

prediction3 = model_svc.predict(X_test)
from sklearn.metrics import accuracy_score

print(accuracy_score(y_test, prediction3))

from sklearn.metrics import classification_report

print(classification_report(y_test, prediction2))

#import matplotlib.pyplot as plt
#X_new = np.array([[3, 2, 1, 0.2], [4.9, 2.2, 3.8, 1.1], [5.3, 2.5, 4.6, 1.9]])
#prediction = model_sve.predict(X_new)

#print("Prediction of Species: {}".format(prediction))

