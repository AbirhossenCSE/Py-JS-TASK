# -*- coding: utf-8 -*-
"""Corn Leaf Disease Classification_mobileNet.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Dc4obOzF7zzmZRkr2s0DsvZEwmMpblzk
"""

from google.colab import drive
from PIL import Image
import os

# Mount Google Drive
drive.mount('/content/drive')

# Define input and output directories
input_dir = "/content/drive/MyDrive/DIP/data/Blight"
output_dir = "/content/drive/MyDrive/DIP/Resize Image/Blight"

# Create the output directory if it doesn't exist
os.makedirs(output_dir, exist_ok=True)

# Define target size for resizing
target_size = (224, 224)  # Change this to your desired size

# Iterate over each file in the input directory
for filename in os.listdir(input_dir):
    if filename.endswith((".jpg", ".png", ".jpeg")):  # Adjust file extensions as needed
        # Open the image
        img = Image.open(os.path.join(input_dir, filename))
        # Resize the image
        img_resized = img.resize(target_size, Image.ANTIALIAS)
        # Save the resized image to the output directory
        img_resized.save(os.path.join(output_dir, filename))

from google.colab import drive
from PIL import Image
import os

# Mount Google Drive
drive.mount('/content/drive')

# Define input and output directories
input_dir = "/content/drive/MyDrive/DIP/data/Common_Rust"
output_dir = "/content/drive/MyDrive/DIP/Resize Image/Common_Rust"

# Create the output directory if it doesn't exist
os.makedirs(output_dir, exist_ok=True)

# Define target size for resizing
target_size = (224, 224)  # Change this to your desired size

# Iterate over each file in the input directory
for filename in os.listdir(input_dir):
    if filename.endswith((".jpg", ".png", ".jpeg")):  # Adjust file extensions as needed
        # Open the image
        img = Image.open(os.path.join(input_dir, filename))
        # Resize the image
        img_resized = img.resize(target_size, Image.ANTIALIAS)
        # Save the resized image to the output directory
        img_resized.save(os.path.join(output_dir, filename))

from google.colab import drive
from PIL import Image
import os

# Define input and output directories
input_dir = "/content/drive/MyDrive/DIP/data/Gray_Leaf_Spot"
output_dir = "/content/drive/MyDrive/DIP/Resize Image/Gray_Leaf_Spot"

# Create the output directory if it doesn't exist
os.makedirs(output_dir, exist_ok=True)

# Define target size for resizing
target_size = (224, 224)  # Change this to your desired size

# Iterate over each file in the input directory
for filename in os.listdir(input_dir):
    if filename.endswith((".jpg", ".png", ".jpeg")):
        # Open the image
        img = Image.open(os.path.join(input_dir, filename))

        # Convert RGBA to RGB mode if necessary
        if img.mode == 'RGBA':
            img = img.convert('RGB')

        # Resize the image
        img_resized = img.resize(target_size, Image.ANTIALIAS)

        # Save the resized image to the output directory
        img_resized.save(os.path.join(output_dir, filename))

from google.colab import drive
from PIL import Image
import os

# Define input and output directories
input_dir = "/content/drive/MyDrive/DIP/data/Healthy"
output_dir = "/content/drive/MyDrive/DIP/Resize Image/Healthy"

# Create the output directory if it doesn't exist
os.makedirs(output_dir, exist_ok=True)

# Define target size for resizing
target_size = (224, 224)  # Change this to your desired size

# Iterate over each file in the input directory
for filename in os.listdir(input_dir):
    if filename.endswith((".jpg", ".png", ".jpeg")):
        # Open the image
        img = Image.open(os.path.join(input_dir, filename))

        # Convert RGBA to RGB mode if necessary
        if img.mode == 'RGBA':
            img = img.convert('RGB')

        # Resize the image
        img_resized = img.resize(target_size, Image.ANTIALIAS)

        # Save the resized image to the output directory
        img_resized.save(os.path.join(output_dir, filename))

"""MobileNetV2"""

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.layers import GlobalAveragePooling2D, Dense
from tensorflow.keras.models import Model

# Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

# Define data directories
train_dir = "/content/drive/MyDrive/DIP/Train"
test_dir = "/content/drive/MyDrive/DIP/Test"

# Image dimensions
img_height, img_width = 224, 224
batch_size = 32

# Data augmentation and preprocessing
train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

test_datagen = ImageDataGenerator(rescale=1./255)

# Load and augment training data
train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=(img_height, img_width),
    batch_size=batch_size,
    class_mode='categorical'
)

# Load test data
test_generator = test_datagen.flow_from_directory(
    test_dir,
    target_size=(img_height, img_width),
    batch_size=batch_size,
    class_mode='categorical'
)

# Load pre-trained MobileNetV2 model
base_model = MobileNetV2(input_shape=(img_height, img_width, 3), include_top=False, weights='imagenet')

# Add custom classification head
x = GlobalAveragePooling2D()(base_model.output)
x = Dense(512, activation='relu')(x)
output = Dense(train_generator.num_classes, activation='softmax')(x)  # Adjusted to dynamically get number of classes

# Create model
model = Model(inputs=base_model.input, outputs=output)

# Freeze base layers
for layer in base_model.layers:
    layer.trainable = False

# Compile the model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(train_generator, epochs=10, validation_data=test_generator)

# Evaluate the model
test_loss, test_acc = model.evaluate(test_generator)
print("Test Accuracy:", test_acc)

"""DenseNet201

InceptionV3
"""

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import InceptionV3
from tensorflow.keras.layers import GlobalAveragePooling2D, Dense
from tensorflow.keras.models import Model

# Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

# Define data directories
train_dir = "/content/drive/MyDrive/DIP/Train"
test_dir = "/content/drive/MyDrive/DIP/Test"

# Image dimensions
img_height, img_width = 224, 224
batch_size = 32

# Data augmentation and preprocessing
train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

test_datagen = ImageDataGenerator(rescale=1./255)

# Load and augment training data
train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=(img_height, img_width),
    batch_size=batch_size,
    class_mode='categorical'
)

# Load test data
test_generator = test_datagen.flow_from_directory(
    test_dir,
    target_size=(img_height, img_width),
    batch_size=batch_size,
    class_mode='categorical'
)

# Load pre-trained InceptionV3 model
base_model = InceptionV3(input_shape=(img_height, img_width, 3), include_top=False, weights='imagenet')

# Add custom classification head
x = GlobalAveragePooling2D()(base_model.output)
x = Dense(512, activation='relu')(x)
output = Dense(train_generator.num_classes, activation='softmax')(x)  # Adjusted to dynamically get number of classes

# Create model
model = Model(inputs=base_model.input, outputs=output)

# Freeze base layers
for layer in base_model.layers:
    layer.trainable = False

# Compile the model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(train_generator, epochs=10, validation_data=test_generator)

# Evaluate the model
test_loss, test_acc = model.evaluate(test_generator)
print("Test Accuracy:", test_acc)