# -*- coding: utf-8 -*-
"""Heart Disease.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AahiANL1ZLQKRZB9Apic9iulJ6uEJHFG

**Team Members:**
Md. Saymon Ahammad(202-15-14388),Md. Muaj Chowdhury(202-15-14389),Sadia Akter Sinthia(202-15-14369),Mohammad Nurul Afsar(201-15-13678)
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
import seaborn as sns

heart_data=pd.read_csv('/content/heart.csv')

heart_data

heart_data.info()

heart_data.isnull().sum()

heart_data.describe()

heart_data.describe().plot()
plt.show()

cor=heart_data.corr()
plt.figure()
sns.heatmap(cor,annot=True,cmap='coolwarm')
plt.show()

heart_data['target'].value_counts()

sns.countplot(heart_data['target'])

slices =heart_data['target'].value_counts()
activities = ['Yes','No']
cols = ['b','g']

plt.pie(slices,
  labels=activities,
  colors=cols,
  startangle=90,
  shadow= False,
  explode=(0.01,0.01),
  autopct='%1.0f%%',
  radius=1.8)

plt.title('Pie Plot\n\n\n\n\n\n')
plt.show()

X=heart_data.drop(columns='target',axis=1)
Y=heart_data['target']

sns.distplot(X)

X

Y

sns.distplot(Y)

#train and test spliting
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2)

print(X.shape,X_train.shape,X_test.shape)

"""**Logistic regression**"""

#importing LogisticRegression function into lg variable
lg=LogisticRegression()

lg.fit(X_train,Y_train)

#Accuracy of the training data
X_train_prediction= lg.predict(X_train)
training_data_accuracy=accuracy_score(X_train_prediction,Y_train)

print('Accuracy on Training Data: ',training_data_accuracy*100)

#Accuracy of the test data
X_test_prediction= lg.predict(X_test)
test_data_accuracy=accuracy_score(X_test_prediction,Y_test)

print('Accuracy on Test Data: ',test_data_accuracy*100)

"""**Naive Bayes**"""

from sklearn.naive_bayes import GaussianNB
gnb = GaussianNB()
gnb.fit(X_train, Y_train)

pred = gnb.predict(X_test)

print(gnb.score(X_test,Y_test)*100)

"""**SVC**"""

from sklearn.svm import SVC
svc=SVC(kernel="poly")
svc.fit(X_train,Y_train)
y_predict = svc.predict(X_test)

accuracy = svc.score(X_train, Y_train)*100
accuracy

accuracy = svc.score(X_test, Y_test)*100
accuracy

"""Predicting Model

"""

input_data=(54,1,0,120,188,0,1,113,0,1.4,1,1,3)
numpy_input=np.asarray(input_data)
reshaped_input=numpy_input.reshape(1,-1)
prediction=lg.predict(reshaped_input)
if prediction==1:
  print("Yes")
else:
  print("No")