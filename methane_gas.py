# -*- coding: utf-8 -*-
"""Methane Gas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ycuNT-giyZt3SZ9pw72c6kfs11Qs0k7j
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np

df = pd.read_csv('/content/drive/MyDrive/Big Data & IoT/Methane_Gas_Data.csv')

df.head()

df.tail()

df.isnull().sum()

import pandas as pd
import matplotlib.pyplot as plt

# Load your dataset
df = pd.read_csv('/content/drive/MyDrive/Big Data & IoT/Methane_Gas_Data.csv')

# Assuming 'Area' is the column containing area information in your dataset
# Replace 'Area' with the actual column name if it's different
area_counts = df['Area'].value_counts()

# Plotting a bar plot
plt.figure(figsize=(10, 6))
area_counts.plot(kind='bar', color='skyblue')
plt.title('Distribution of Data Across Different Areas')
plt.xlabel('Area')
plt.ylabel('Count of Data')
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Load your dataset
df = pd.read_csv('/content/drive/MyDrive/Big Data & IoT/Methane_Gas_Data.csv')

# Assuming 'Area' is the column containing area information and 'Gas_Level' is the gas level column
# Replace 'Area' and 'Gas_Level' with the actual column names if they are different
plt.figure(figsize=(10, 6))
sns.boxplot(x='Area', y='Gas_Level', data=df, palette='Set3')
plt.title('Gas Levels Across Different Areas')
plt.xlabel('Area')
plt.ylabel('Gas Level')
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()



import pandas as pd
import matplotlib.pyplot as plt
from imblearn.over_sampling import SMOTE

# Load your dataset
df = pd.read_csv('/content/drive/MyDrive/Big Data & IoT/Methane_Gas_Data.csv')  # Update with the correct path

# Identify columns with categorical or non-numeric values and exclude them from features
categorical_columns = ['Entry_Date', 'Entry_Time', 'Area']  # Replace with the names of your categorical columns
df.drop(columns=categorical_columns, inplace=True)

# Define your feature variables (X) and target variable (y)
X = df.drop(columns=['Output'])  # Replace 'Output' with the name of your target variable column if different
y = df['Output']  # Replace 'Output' with the name of your target variable column if different

# Display class distribution before balancing
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.title('Class Distribution Before Balancing')
y.value_counts().plot(kind='bar')
plt.xlabel('Class')
plt.ylabel('Count')

# Apply SMOTE to balance the dataset
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Display class distribution after balancing
plt.subplot(1, 2, 2)
plt.title('Class Distribution After Balancing')
y_resampled.value_counts().plot(kind='bar')
plt.xlabel('Class')
plt.ylabel('Count')

plt.tight_layout()
plt.show()



"""# **SVM**"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Load dataset (replace 'your_dataset.csv' with your dataset file)
df = pd.read_csv('/content/drive/MyDrive/Big Data & IoT/Methane_Gas_Data.csv')

print(df)

df.drop(columns=['Entry_Date','Entry_Time','Entry_ID', 'Area'], inplace=True)

df.head()

from sklearn.preprocessing import LabelEncoder

label_encoder = LabelEncoder()

# Fit and transform the categorical column
df['Output'] = label_encoder.fit_transform(df['Output'])

# Display the DataFrame after label encoding
df.head()

X = df.drop(columns=['Gas_Level'])

# Define y as the target vector
y = df['Output']

from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

svm = SVC(kernel='linear', C=1.0, random_state=42)
svm.fit(X_train_scaled, y_train)

y_pred = svm.predict(X_test_scaled)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

y_pred = svm.predict(X_test_scaled)#

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

# Generate and print the classification report
print("Classification Report:")
print(classification_report(y_test, y_pred))

import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Get unique class labels from both true and predicted labels
classes = np.unique(np.concatenate((y_test, y_pred)))

# Compute the confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)

# Set the figure size
plt.figure(figsize=(8, 6))

# Plot the confusion matrix as a heatmap with color annotations
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')

# Add labels, title, and axis ticks
plt.xlabel('Predicted labels')
plt.ylabel('True labels')
plt.title('Confusion Matrix')
plt.xticks(ticks=range(len(classes)), labels=classes)
plt.yticks(ticks=range(len(classes)), labels=classes)

# Show the plot
plt.show()

"""Jaccard score

"""

from sklearn.metrics import jaccard_score

# Calculate the Jaccard similarity score for each class
jaccard_scores = jaccard_score(y_test, y_pred, average=None)

# Display Jaccard similarity scores for each class
for class_idx, score in enumerate(jaccard_scores):
    print(f"Jaccard similarity score for Class {class_idx}: {score}")

from sklearn.metrics import jaccard_score
import matplotlib.pyplot as plt

# Calculate the Jaccard similarity score
jaccard = jaccard_score(y_test, y_pred, average=None)

# Plotting
labels = ['Moderate', 'Low', 'High']
values = jaccard

plt.bar(labels, values, color='skyblue')
plt.ylabel('Jaccard Score')
plt.title('Jaccard Similarity between Predicted and Actual Labels')
plt.ylim(0, 1)  # Setting the y-axis limit to be between 0 and 1
plt.show()

"""# **Decission Tree**"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Load your dataset (replace 'your_dataset.csv' with your dataset file)
df = pd.read_csv('/content/drive/MyDrive/Big Data & IoT/Methane_Gas_Data.csv')

print(df)

df.drop(columns=['Entry_Date','Entry_Time','Entry_ID', 'Area'], inplace=True)

df.head()

from sklearn.preprocessing import LabelEncoder

label_encoder = LabelEncoder()

# Fit and transform the categorical column
df['Output'] = label_encoder.fit_transform(df['Output'])

# Display the DataFrame after label encoding
print(df.head())

X = df.drop(columns=['Gas_Level'])

# Define y as the target vector
y = df['Output']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

dt_classifier = DecisionTreeClassifier(random_state=42)
dt_classifier.fit(X_train, y_train)

y_pred = dt_classifier.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

print("Classification Report:")
print(classification_report(y_test, y_pred))

print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Get unique class labels from both true and predicted labels
classes = np.unique(np.concatenate((y_test, y_pred)))

# Compute the confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)

# Set the figure size
plt.figure(figsize=(8, 6))

# Plot the confusion matrix as a heatmap with color annotations
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')

# Add labels, title, and axis ticks
plt.xlabel('Predicted labels')
plt.ylabel('True labels')
plt.title('Confusion Matrix')
plt.xticks(ticks=range(len(classes)), labels=classes)
plt.yticks(ticks=range(len(classes)), labels=classes)

# Show the plot
plt.show()





"""# **Random Forest**"""

import numpy as np
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score


import pandas as pd

# Load the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/Big Data & IoT/Methane_Gas_Data.csv")

# Display the first few rows of the DataFrame to verify that it's loaded correctly
print(df.head(10))

from sklearn.preprocessing import LabelEncoder

# Assuming df is your DataFrame and 'categorical_column' is the name of the column you want to encode
# Replace 'categorical_column' with the actual name of the column you want to encode

# Example: If 'categorical_column' is 'Species' in the iris dataset
# Load the CSV file into a DataFrame


# Create an instance of LabelEncoder
label_encoder = LabelEncoder()

# Fit and transform the categorical column
df['Output'] = label_encoder.fit_transform(df['Output'])

# Display the DataFrame after label encoding
print(df.head())

df.drop(columns=['Entry_Date','Entry_Time','Entry_ID', 'Area'], inplace=True)

df.head()

# Define X as the feature matrix (all columns except the target column)
X = df.drop(columns=['Gas_Level'])

# Define y as the target vector
y = df['Output']

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# Assuming df is your DataFrame and you have already preprocessed it
# X contains the features, y contains the target variable

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest classifier
rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)

# Train the classifier on the training data
rf_classifier.fit(X_train, y_train)

# Predict the labels for the test data
y_pred = rf_classifier.predict(X_test)

# Evaluate the classifier's performance
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

from sklearn.metrics import classification_report

# Assuming y_test contains the true labels and y_pred contains the predicted labels
# y_test and y_pred should be one-dimensional arrays or lists containing the labels

# Generate a classification report
report = classification_report(y_test, y_pred)

# Print the classification report
print(report)

import numpy as np

# Get unique class labels from both true and predicted labels
classes = np.unique(np.concatenate((y_test, y_pred)))

# Compute the confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)

# Set the figure size
plt.figure(figsize=(8, 6))

# Plot the confusion matrix as a heatmap with color annotations
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')

# Add labels, title, and axis ticks
plt.xlabel('Predicted labels')
plt.ylabel('True labels')
plt.title('Confusion Matrix')
plt.xticks(ticks=range(len(classes)), labels=classes)
plt.yticks(ticks=range(len(classes)), labels=classes)

# Show the plot
plt.show()



"""# **Naive Bayes**"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Load your dataset (replace 'your_dataset.csv' with your dataset file)
df = pd.read_csv('/content/drive/MyDrive/Big Data & IoT/Methane_Gas_Data.csv')

print(df)

df.drop(columns=['Entry_Date','Entry_Time','Entry_ID', 'Area'], inplace=True)

df.head()

from sklearn.preprocessing import LabelEncoder

label_encoder = LabelEncoder()

# Fit and transform the categorical column
df['Output'] = label_encoder.fit_transform(df['Output'])

# Display the DataFrame after label encoding
print(df.head())

X = df.drop(columns=['Gas_Level'])

# Define y as the target vector
y = df['Output']

from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=50)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

nb_classifier = GaussianNB()
nb_classifier.fit(X_train, y_train)

y_pred = nb_classifier.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

print("Classification Report:")
print(classification_report(y_test, y_pred))

print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Get unique class labels from both true and predicted labels
classes = np.unique(np.concatenate((y_test, y_pred)))

# Compute the confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)

# Set the figure size
plt.figure(figsize=(8, 6))

# Plot the confusion matrix as a heatmap with color annotations
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')

# Add labels, title, and axis ticks
plt.xlabel('Predicted labels')
plt.ylabel('True labels')
plt.title('Confusion Matrix')
plt.xticks(ticks=range(len(classes)), labels=classes)
plt.yticks(ticks=range(len(classes)), labels=classes)

# Show the plot
plt.show()











"""jacard score"""

from sklearn.metrics import jaccard_score

# Calculate the Jaccard similarity score for each class
jaccard_scores = jaccard_score(y_test, y_pred, average=None)

# Display Jaccard similarity scores for each class
for class_idx, score in enumerate(jaccard_scores):
    print(f"Jaccard similarity score for Class {class_idx}: {score}")

from sklearn.metrics import jaccard_score
import matplotlib.pyplot as plt

# Calculate the Jaccard similarity score
jaccard = jaccard_score(y_test, y_pred, average=None)

# Plotting
labels = ['Moderate', 'Low', 'High']
values = jaccard

plt.bar(labels, values, color='skyblue')
plt.ylabel('Jaccard Score')
plt.title('Jaccard Similarity between Predicted and Actual Labels')
plt.ylim(0, 1)  # Setting the y-axis limit to be between 0 and 1
plt.show()

"""cross validation"""

from sklearn.model_selection import cross_val_score
from sklearn.ensemble import RandomForestClassifier

# Initialize a Random Forest classifier
rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)

# Perform cross-validation
cv_scores = cross_val_score(rf_classifier, X, y, cv=5)

# Display cross-validation scores
print("Cross-validation scores:", cv_scores)

# Calculate and print the mean and standard deviation of cross-validation scores
mean_cv_score = cv_scores.mean()
std_cv_score = cv_scores.std()
print("Mean cross-validation score:", mean_cv_score)
print("Standard deviation of cross-validation scores:", std_cv_score)

import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import cross_val_score
from sklearn.ensemble import RandomForestClassifier

# Initialize a Random Forest classifier
rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)

# Perform cross-validation
cv_scores = cross_val_score(rf_classifier, X, y, cv=5)

# Calculate mean and standard deviation of cross-validation scores
mean_cv_score = np.mean(cv_scores)
std_cv_score = np.std(cv_scores)

# Plotting
plt.figure(figsize=(8, 6))
plt.bar(range(1, len(cv_scores) + 1), cv_scores, color='skyblue', alpha=0.7, label='Cross-validation scores')
plt.axhline(mean_cv_score, color='red', linestyle='--', label=f'Mean CV Score ({mean_cv_score:.2f})')
plt.fill_between(range(1, len(cv_scores) + 1), mean_cv_score - std_cv_score, mean_cv_score + std_cv_score,
                 color='gray', alpha=0.3, label='Standard deviation')
plt.xlabel('Fold')
plt.ylabel('Accuracy')
plt.title('Cross-validation Scores')
plt.legend()
plt.show()

"""AUC and ROC"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import cross_val_predict
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import roc_curve, auc
from sklearn.preprocessing import label_binarize
from sklearn.datasets import make_classification

# Assuming you have features X and labels y
# Generate some sample data for demonstration purpose
X, y = make_classification(n_samples=270000, n_features=10, n_classes=3, n_clusters_per_class=1, random_state=42)

# Initialize a Random Forest classifier
rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)

# Binarize the labels
y_bin = label_binarize(y, classes=np.unique(y))

# Perform cross-validated predictions
y_scores = cross_val_predict(rf_classifier, X, y, cv=5, method='predict_proba')

# Compute micro-averaged ROC curve and AUC
fpr_micro, tpr_micro, _ = roc_curve(y_bin.ravel(), y_scores.ravel())
roc_auc_micro = auc(fpr_micro, tpr_micro)

# Plot micro-averaged ROC curve
plt.figure(figsize=(8, 6))
plt.plot(fpr_micro, tpr_micro, color='blue', lw=2, label=f'Micro-Averaged ROC curve (AUC = {roc_auc_micro:.2f})')
plt.plot([0, 1], [0, 1], color='gray', linestyle='--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.legend(loc='lower right')
plt.show()



import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import cross_val_score, train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix, jaccard_score
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import GaussianNB

# Define the algorithms
classifiers = {
    'SVM': SVC(),
    'Decision Tree': DecisionTreeClassifier(),
    'Random Forest': RandomForestClassifier(),
    'Naive Bayes': GaussianNB()
}

# Load your dataset and split it into features (X) and labels (y)
# Replace X and y with your dataset's features and labels

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize dictionaries to store performance metrics
accuracy_scores = {}
confusion_matrices = {}
cross_val_scores = {}
jaccard_scores = {}

# Iterate over each algorithm
for name, clf in classifiers.items():
    # Train the classifier
    clf.fit(X_train, y_train)

    # Evaluate accuracy on the test set
    y_pred = clf.predict(X_test)
    accuracy_scores[name] = accuracy_score(y_test, y_pred)

    # Compute confusion matrix
    confusion_matrices[name] = confusion_matrix(y_test, y_pred)

    # Compute cross-validation scores
    cv_scores = cross_val_score(clf, X, y, cv=5)
    cross_val_scores[name] = np.mean(cv_scores)

    # Compute Jaccard score
    jaccard_scores[name] = jaccard_score(y_test, y_pred, average='weighted')

# Plot the accuracy scores
plt.figure(figsize=(10, 6))
plt.bar(accuracy_scores.keys(), accuracy_scores.values(), color='skyblue')
plt.xlabel('Algorithm')
plt.ylabel('Accuracy')
plt.title('Accuracy of Different Algorithms')
plt.ylim(0, 1)
plt.xticks(rotation=45)
plt.show()

# Print other performance metrics
for name in classifiers.keys():
    print(f'Algorithm: {name}')
    print(f'Confusion Matrix:\n{confusion_matrices[name]}')
    print(f'Cross-Validation Score: {cross_val_scores[name]}')
    print(f'Jaccard Score: {jaccard_scores[name]}')
    print('-' * 40)





""" Jaccard Score of All Models:"""



from sklearn.metrics import jaccard_score

# Initialize a dictionary to store Jaccard scores for each model
jaccard_scores = {}

# Iterate over each algorithm
for name, clf in classifiers.items():
    # Predict the labels on the test set
    y_pred = clf.predict(X_test)
    # Compute the Jaccard score
    jaccard_scores[name] = jaccard_score(y_test, y_pred, average='weighted')

# Print the Jaccard scores
for name, score in jaccard_scores.items():
    print(f'Jaccard Score for {name}: {score}')

import matplotlib.pyplot as plt

# Initialize lists to store model names and Jaccard scores
model_names = []
jaccard_scores = []

# Iterate over each algorithm
for name, clf in classifiers.items():
    # Predict the labels on the test set
    y_pred = clf.predict(X_test)
    # Compute the Jaccard score
    jaccard = jaccard_score(y_test, y_pred, average='weighted')
    # Append model name and Jaccard score to lists
    model_names.append(name)
    jaccard_scores.append(jaccard)

# Plot the Jaccard scores
plt.figure(figsize=(10, 6))
plt.bar(model_names, jaccard_scores, color='skyblue')
plt.xlabel('Model')
plt.ylabel('Jaccard Score')
plt.title('Jaccard Score of Different Models')
plt.ylim(0, 1)
plt.xticks(rotation=45)
plt.show()





"""Cross-Validation Score of All Models:"""



from sklearn.model_selection import cross_val_score

# Initialize a dictionary to store cross-validation scores for each model
cross_val_scores = {}

# Iterate over each algorithm
for name, clf in classifiers.items():
    # Compute cross-validation scores
    cv_scores = cross_val_score(clf, X, y, cv=5)
    cross_val_scores[name] = np.mean(cv_scores)

# Print the cross-validation scores
for name, score in cross_val_scores.items():
    print(f'Cross-Validation Score for {name}: {score}')

import matplotlib.pyplot as plt

# Initialize lists to store model names and cross-validation scores
model_names = []
cross_val_scores = []

# Iterate over each algorithm
for name, clf in classifiers.items():
    # Compute cross-validation scores
    cv_scores = cross_val_score(clf, X, y, cv=5)
    mean_cv_score = np.mean(cv_scores)
    # Append model name and cross-validation score to lists
    model_names.append(name)
    cross_val_scores.append(mean_cv_score)

# Plot the cross-validation scores
plt.figure(figsize=(10, 6))
plt.bar(model_names, cross_val_scores, color='skyblue')
plt.xlabel('Model')
plt.ylabel('Cross-Validation Score')
plt.title('Cross-Validation Score of Different Models')
plt.ylim(0, 1)
plt.xticks(rotation=45)
plt.show()



"""ROC courv"""



from sklearn.metrics import roc_curve, auc
import matplotlib.pyplot as plt
from sklearn.preprocessing import label_binarize
from sklearn.multiclass import OneVsRestClassifier

# Train the SVM model
svm_model = SVC(probability=True)
ovr_classifier = OneVsRestClassifier(svm_model)
ovr_classifier.fit(X_train, y_train)

# Compute the predicted probabilities for each class
y_score_ovr = ovr_classifier.predict_proba(X_test)

# Binarize the labels
y_test_binarized = label_binarize(y_test, classes=np.unique(y_test))

# Compute the ROC curve and ROC area for each class
fpr = dict()
tpr = dict()
roc_auc = dict()
for i in range(len(np.unique(y_test))):
    fpr[i], tpr[i], _ = roc_curve(y_test_binarized[:, i], y_score_ovr[:, i])
    roc_auc[i] = auc(fpr[i], tpr[i])

# Plot the ROC curve for each class
plt.figure(figsize=(8, 6))
for i in range(len(np.unique(y_test))):
    plt.plot(fpr[i], tpr[i], lw=2, label='Class {} (AUC = {:.2f})'.format(i, roc_auc[i]))

plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve for SVM Model (One-vs-Rest)')
plt.legend(loc="lower right")
plt.show()

from sklearn.metrics import roc_curve, auc
import matplotlib.pyplot as plt
from sklearn.preprocessing import label_binarize
from sklearn.tree import DecisionTreeClassifier
from sklearn.multiclass import OneVsRestClassifier

# Train the Decision Tree model
dt_classifier = DecisionTreeClassifier(random_state=42)
ovr_classifier = OneVsRestClassifier(dt_classifier)
ovr_classifier.fit(X_train, y_train)

# Compute the decision function for each class
y_score_dt = ovr_classifier.predict_proba(X_test)

# Binarize the labels
y_test_binarized = label_binarize(y_test, classes=np.unique(y_test))

# Compute ROC curve and ROC area for each class
fpr = dict()
tpr = dict()
roc_auc = dict()
for i in range(len(np.unique(y_test))):
    fpr[i], tpr[i], _ = roc_curve(y_test_binarized[:, i], y_score_dt[:, i])
    roc_auc[i] = auc(fpr[i], tpr[i])

# Plot ROC curve for each class
plt.figure(figsize=(8, 6))
for i in range(len(np.unique(y_test))):
    plt.plot(fpr[i], tpr[i], lw=2, label='Class {} (AUC = {:.2f})'.format(i, roc_auc[i]))

plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve for Decision Tree Model (One-vs-Rest)')
plt.legend(loc="lower right")
plt.show()

from sklearn.metrics import roc_curve, auc
import matplotlib.pyplot as plt
from sklearn.preprocessing import label_binarize
from sklearn.ensemble import RandomForestClassifier
from sklearn.multiclass import OneVsRestClassifier

# Train the Random Forest model
rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)

# Use OneVsRestClassifier to handle multiclass classification
ovr_classifier = OneVsRestClassifier(rf_classifier)
ovr_classifier.fit(X_train, y_train)

# Compute the predicted probabilities for each class
y_score_rf = ovr_classifier.predict_proba(X_test)

# Binarize the labels
y_test_binarized = label_binarize(y_test, classes=np.unique(y_test))

# Compute ROC curve and ROC area for each class
fpr = dict()
tpr = dict()
roc_auc = dict()
for i in range(len(np.unique(y_test))):
    fpr[i], tpr[i], _ = roc_curve(y_test_binarized[:, i], y_score_rf[:, i])
    roc_auc[i] = auc(fpr[i], tpr[i])

# Plot ROC curve for each class
plt.figure(figsize=(8, 6))
for i in range(len(np.unique(y_test))):
    plt.plot(fpr[i], tpr[i], lw=2, label='Class {} (AUC = {:.2f})'.format(i, roc_auc[i]))

plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve for Random Forest Model (One-vs-Rest)')
plt.legend(loc="lower right")
plt.show()

from sklearn.metrics import roc_curve, auc
import matplotlib.pyplot as plt
from sklearn.preprocessing import label_binarize
from sklearn.naive_bayes import GaussianNB
from sklearn.multiclass import OneVsRestClassifier

# Train the Naive Bayes model
nb_classifier = GaussianNB()

# Use OneVsRestClassifier to handle multiclass classification
ovr_classifier = OneVsRestClassifier(nb_classifier)
ovr_classifier.fit(X_train, y_train)

# Compute the predicted probabilities for each class
y_score_nb = ovr_classifier.predict_proba(X_test)

# Binarize the labels
y_test_binarized = label_binarize(y_test, classes=np.unique(y_test))

# Compute ROC curve and ROC area for each class
fpr = dict()
tpr = dict()
roc_auc = dict()
for i in range(len(np.unique(y_test))):
    fpr[i], tpr[i], _ = roc_curve(y_test_binarized[:, i], y_score_nb[:, i])
    roc_auc[i] = auc(fpr[i], tpr[i])

# Plot ROC curve for each class
plt.figure(figsize=(8, 6))
for i in range(len(np.unique(y_test))):
    plt.plot(fpr[i], tpr[i], lw=2, label='Class {} (AUC = {:.2f})'.format(i, roc_auc[i]))

plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve for Naive Bayes Model (One-vs-Rest)')
plt.legend(loc="lower right")
plt.show()

