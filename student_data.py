# -*- coding: utf-8 -*-
"""student_data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GE0FTLJRcBY-680af5421VB-2s1_OAKP
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from imblearn.over_sampling import SMOTE
from sklearn.datasets import make_classification
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score

df = pd.read_csv("/content/drive/MyDrive/Big Data & IoT/student_data.csv")

df.shape

df.head(6)

import warnings
warnings.filterwarnings('ignore')

df.isnull().sum()

print("Class distribution before SMOTE:")
print(pd.Series(y_train).value_counts())

plt.figure(figsize=(8, 6))
plt.bar(pd.unique(y_train), pd.Series(y_train).value_counts(), color=['skyblue', 'orange'])
plt.title('Class Distribution Before SMOTE')
plt.xlabel('Class')
plt.ylabel('Count')
plt.xticks(pd.unique(y_train))
plt.show()

X, y = make_classification(n_classes=2, class_sep=2, weights=[0.1, 0.9],
                           n_informative=3, n_redundant=1, flip_y=0,
                           n_features=20, n_clusters_per_class=1,
                           n_samples=1000, random_state=42)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

smote = SMOTE(random_state=42)
X_train_balanced, y_train_balanced = smote.fit_resample(X_train, y_train)

print("\nClass distribution after SMOTE:")
print(pd.Series(y_train_balanced).value_counts())

clf = RandomForestClassifier(random_state=42)
clf.fit(X_train_balanced, y_train_balanced)

plt.figure(figsize=(8, 6))
plt.bar(pd.unique(y_train_balanced), pd.Series(y_train_balanced).value_counts(), color=['skyblue', 'orange'])
plt.title('Class Distribution After SMOTE')
plt.xlabel('Class')
plt.ylabel('Count')
plt.xticks(pd.unique(y_train_balanced))
plt.show()

y_pred = clf.predict(X_test)

print("\nClassification Report:")
print(classification_report(y_test, y_pred))

print("\nAccuracy Score:", accuracy_score(y_test, y_pred))

